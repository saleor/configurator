services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: saleor
      POSTGRES_PASSWORD: saleor
      POSTGRES_DB: saleor
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saleor -d saleor"]
      interval: 2s
      timeout: 3s
      retries: 30
      start_period: 10s
    volumes:
      - saleor-db:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro

  redis:
    image: redis:7.0-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 3s
      retries: 10
      start_period: 5s

  api:
    image: ghcr.io/saleor/saleor:3.20
    ports:
      - "8000"
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        until PGPASSWORD=saleor psql -h db -U saleor -d saleor -c '\q' 2>/dev/null; do
          echo 'Database is unavailable - sleeping';
          sleep 2;
        done &&
        echo 'Database is ready!' &&
        echo 'Running migrations...' &&
        python manage.py migrate --no-input &&
        echo 'Creating superuser...' &&
        python manage.py shell -c \"
          from django.contrib.auth import get_user_model;
          User = get_user_model();
          if not User.objects.filter(email='admin@example.com').exists():
              User.objects.create_superuser(email='admin@example.com', password='admin123');
              print('Superuser created');
          else:
              print('Superuser exists');
        \" &&
        echo 'Starting Saleor...' &&
        gunicorn --bind 0.0.0.0:8000 --workers 2 --worker-class saleor.asgi:gunicorn_worker_class saleor.asgi:application"
    environment:
      DATABASE_URL: "postgresql://saleor:saleor@db/saleor"
      REDIS_URL: "redis://redis:6379/0"
      CELERY_BROKER_URL: "redis://redis:6379/1"
      SECRET_KEY: "test-secret-key-for-e2e-testing"
      DEBUG: "False"
      ALLOWED_HOSTS: "*"
      ALLOWED_CLIENT_HOSTS: "*"
      DEFAULT_FROM_EMAIL: "test@example.com"
      ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL: "False"
      ENABLE_DEBUG_TOOLBAR: "False"
      JAEGER_AGENT_HOST: ""
      ENABLE_SILK: "False"
      ENABLE_EMAILS: "False"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import requests; r = requests.post('http://localhost:8000/graphql/', json={'query': '{ shop { name } }'}); r.raise_for_status(); exit(0 if 'shop' in r.json().get('data', {}) else 1)\""]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 60s
    volumes:
      - saleor-media:/app/media

volumes:
  saleor-db:
  saleor-media:

networks:
  default:
    name: saleor-e2e-test
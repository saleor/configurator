# Docker Compose for local E2E testing
# Run with: docker-compose -f e2e/docker-compose.yml up -d

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: saleor
      POSTGRES_PASSWORD: saleor
      POSTGRES_DB: saleor
    ports:
      - "5432:5432"
    volumes:
      - saleor_db:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - saleor_redis:/data

  api:
    image: ghcr.io/saleor/saleor:3.20
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://saleor:saleor@db:5432/saleor
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      SECRET_KEY: local-development-secret-key
      DEBUG: 'True'
      ALLOWED_HOSTS: '*'
      ALLOWED_CLIENT_HOSTS: '*'
      DEFAULT_FROM_EMAIL: admin@example.com
      ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL: 'False'
    depends_on:
      - db
      - redis
    volumes:
      - saleor_media:/app/media
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        until PGPASSWORD=saleor psql -h db -U saleor -d saleor -c '\q'; do
          echo 'Database is unavailable - sleeping';
          sleep 2;
        done &&
        echo 'Database is ready!' &&
        python manage.py migrate --no-input &&
        python manage.py shell -c \"
          from django.contrib.auth import get_user_model;
          User = get_user_model();
          if not User.objects.filter(email='admin@example.com').exists():
              User.objects.create_superuser(email='admin@example.com', password='admin123');
              print('Superuser created');
          else:
              print('Superuser exists');
        \" &&
        echo 'Starting Saleor...' &&
        python manage.py runserver 0.0.0.0:8000
      "

volumes:
  saleor_db:
  saleor_redis:
  saleor_media:
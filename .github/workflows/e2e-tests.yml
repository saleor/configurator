name: E2E Tests

on:
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "e2e/**"
      - "bin/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - ".github/workflows/e2e-tests.yml"
  push:
    branches: [main, feature/e2e-testing-framework]
  workflow_dispatch:
    inputs:
      verbose:
        description: "Run tests in verbose mode"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

concurrency:
  group: e2e-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saleor
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build CLI
        run: pnpm build

      - name: Initialize Saleor Database
        run: |
          echo "🔧 Initializing Saleor database..."
          
          # Define Saleor environment variables
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/saleor"
          export REDIS_URL="redis://localhost:6379/0"
          export CELERY_BROKER_URL="redis://localhost:6379/1"
          export SECRET_KEY="test-secret-key-for-e2e"
          export DEBUG="True"
          export ALLOWED_HOSTS="*"
          export ALLOWED_CLIENT_HOSTS="*"
          export DEFAULT_FROM_EMAIL="admin@example.com"
          export ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL="False"
          export ENABLE_SSL="False"
          export ENABLE_DEBUG_TOOLBAR="False"
          export MAX_CHECKOUT_LINE_QUANTITY="50"
          export PLAYGROUND_ENABLED="True"
          
          echo "📦 Pulling Saleor image..."
          docker pull ghcr.io/saleor/saleor:3.20
          
          echo "🔧 Running database migrations..."
          docker run --rm \
            --network host \
            -e DATABASE_URL="$DATABASE_URL" \
            -e REDIS_URL="$REDIS_URL" \
            -e CELERY_BROKER_URL="$CELERY_BROKER_URL" \
            -e SECRET_KEY="$SECRET_KEY" \
            -e DEBUG="$DEBUG" \
            -e ALLOWED_HOSTS="$ALLOWED_HOSTS" \
            ghcr.io/saleor/saleor:3.20 \
            python manage.py migrate --no-input
          
          echo "👤 Creating superuser..."
          docker run --rm \
            --network host \
            -e DATABASE_URL="$DATABASE_URL" \
            -e REDIS_URL="$REDIS_URL" \
            -e CELERY_BROKER_URL="$CELERY_BROKER_URL" \
            -e SECRET_KEY="$SECRET_KEY" \
            -e DEBUG="$DEBUG" \
            -e ALLOWED_HOSTS="$ALLOWED_HOSTS" \
            ghcr.io/saleor/saleor:3.20 \
            python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(email='admin@example.com').exists():
    User.objects.create_superuser(email='admin@example.com', password='admin123')
    print('✅ Superuser created')
else:
    print('✅ Superuser already exists')
          "
          
          echo "✅ Database initialization complete"

      - name: Start Saleor API Server
        run: |
          echo "🚀 Starting Saleor API server..."
          
          # Start Saleor in background
          docker run -d \
            --name saleor-api \
            --network host \
            -e DATABASE_URL="postgresql://postgres:postgres@localhost:5432/saleor" \
            -e REDIS_URL="redis://localhost:6379/0" \
            -e CELERY_BROKER_URL="redis://localhost:6379/1" \
            -e SECRET_KEY="test-secret-key-for-e2e" \
            -e DEBUG="True" \
            -e ALLOWED_HOSTS="*" \
            -e ALLOWED_CLIENT_HOSTS="*" \
            -e DEFAULT_FROM_EMAIL="admin@example.com" \
            -e ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL="False" \
            -e ENABLE_SSL="False" \
            -e ENABLE_DEBUG_TOOLBAR="False" \
            -e MAX_CHECKOUT_LINE_QUANTITY="50" \
            -e PLAYGROUND_ENABLED="True" \
            ghcr.io/saleor/saleor:3.20
          
          echo "⏳ Waiting for Saleor API to be ready..."
          
          # Give the server a moment to start
          sleep 5
          
          # Wait for API to be ready (should be much faster now)
          for i in {1..30}; do
            if curl -f http://localhost:8000/graphql/ \
              -X POST \
              -H "Content-Type: application/json" \
              -d '{"query":"{ shop { name } }"}' \
              --max-time 5 --silent > /tmp/shop_test.json 2>&1; then
              if grep -q '"shop"' /tmp/shop_test.json; then
                echo "✅ Saleor API is ready (attempt $i/30)"
                break
              fi
            fi
            
            if [ $i -eq 30 ]; then
              echo "❌ Saleor API failed to become ready"
              echo "📝 Container logs:"
              docker logs saleor-api --tail 50
              exit 1
            fi
            
            echo "⏳ Waiting for API (attempt $i/30)..."
            sleep 2
          done
          
          echo "🧪 Verifying GraphQL endpoint..."
          curl -f http://localhost:8000/graphql/ \
            -X POST \
            -H "Content-Type: application/json" \
            -d '{"query":"{ shop { name } }"}' \
            --max-time 10 --silent --show-error | jq '.'
          
          echo "✅ Saleor API server is running and ready"

      - name: Run quick smoke tests (no Docker required)
        if: github.event_name == 'pull_request'
        run: pnpm test:smoke:quick
        env:
          CI: true
          LOG_LEVEL: error

      - name: Run full smoke tests
        if: github.event_name == 'pull_request'
        run: pnpm test:smoke
        env:
          CI: true
          SALEOR_API_URL: http://localhost:8000/graphql/
          LOG_LEVEL: ${{ github.event.inputs.verbose == 'true' && 'debug' || 'error' }}
          VERBOSE: ${{ github.event.inputs.verbose }}

      - name: Run full E2E test suite
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: pnpm test:e2e
        env:
          CI: true
          SALEOR_API_URL: http://localhost:8000/graphql/
          LOG_LEVEL: ${{ github.event.inputs.verbose == 'true' && 'debug' || 'error' }}
          VERBOSE: ${{ github.event.inputs.verbose }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ github.run_id }}
          path: |
            e2e/test-results/
          retention-days: 7
          if-no-files-found: ignore

      - name: Cleanup Saleor container
        if: always()
        run: |
          docker stop saleor-api || true
          docker rm saleor-api || true

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Try to read test results if they exist
            let testResults = '📊 **E2E Test Results**\n\n';
            const resultsPath = 'e2e/test-results/e2e-results.json';
            
            try {
              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                const passed = results.numPassedTests || 0;
                const failed = results.numFailedTests || 0;
                const total = results.numTotalTests || 0;
                const duration = ((results.testResults?.[0]?.duration || 0) / 1000).toFixed(2);
                
                testResults += `✅ Passed: ${passed}/${total}\n`;
                if (failed > 0) {
                  testResults += `❌ Failed: ${failed}\n`;
                }
                testResults += `⏱️ Duration: ${duration}s\n`;
                
                if (failed > 0 && results.testResults) {
                  testResults += '\n**Failed Tests:**\n';
                  results.testResults.forEach(suite => {
                    suite.assertionResults?.filter(test => test.status === 'failed').forEach(test => {
                      testResults += `- ${test.title}\n`;
                    });
                  });
                }
              } else {
                testResults += '⚠️ Test results not found. Check the workflow logs for details.\n';
              }
            } catch (error) {
              testResults += `⚠️ Could not parse test results: ${error.message}\n`;
            }
            
            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('E2E Test Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: testResults
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: testResults
              });
            }

  e2e-required:
    name: E2E Tests Required
    runs-on: ubuntu-latest
    needs: [e2e]
    if: always()
    steps:
      - name: Check E2E test results
        run: |
          if [ "${{ needs.e2e.result }}" != "success" ]; then
            echo "❌ E2E tests failed or were cancelled"
            exit 1
          fi
          echo "✅ All E2E tests passed"
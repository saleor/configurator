name: E2E Tests

on:
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "e2e/**"
      - "bin/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - ".github/workflows/e2e-tests.yml"
  push:
    branches: [main, feature/e2e-testing-framework]
  workflow_dispatch:
    inputs:
      verbose:
        description: "Run tests in verbose mode"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      skip_docker:
        description: "Skip Docker-dependent E2E tests"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

concurrency:
  group: e2e-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build CLI
        run: pnpm build

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Pre-pull Docker images
        run: |
          docker pull ghcr.io/saleor/saleor:3.20 &
          docker pull postgres:15-alpine &
          docker pull redis:7.0-alpine &
          wait

      - name: Run smoke tests
        if: github.event_name == 'pull_request'
        run: pnpm test:smoke
        env:
          CI: true
          LOG_LEVEL: ${{ github.event.inputs.verbose == 'true' && 'debug' || 'error' }}
          VERBOSE: ${{ github.event.inputs.verbose }}
          SKIP_DOCKER_E2E: ${{ github.event.inputs.skip_docker || 'true' }} # Temporarily skip Docker tests in CI

      - name: Run full E2E test suite
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: pnpm test:e2e
        env:
          CI: true
          LOG_LEVEL: ${{ github.event.inputs.verbose == 'true' && 'debug' || 'error' }}
          VERBOSE: ${{ github.event.inputs.verbose }}
          SKIP_DOCKER_E2E: ${{ github.event.inputs.skip_docker || 'true' }} # Temporarily skip Docker tests in CI

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ github.run_id }}
          path: |
            e2e/test-results/
          retention-days: 7

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-logs-${{ github.run_id }}
          path: |
            e2e/logs/
            e2e/**/*.log
          retention-days: 7

      - name: Docker cleanup
        if: always()
        run: |
          docker ps -aq | xargs -r docker stop
          docker ps -aq | xargs -r docker rm
          docker volume prune -f
          docker network prune -f

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Try to read test results if they exist
            let testResults = 'üìä **E2E Test Results**\n\n';
            const resultsPath = 'e2e/test-results/e2e-results.json';
            
            try {
              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                const passed = results.numPassedTests || 0;
                const failed = results.numFailedTests || 0;
                const total = results.numTotalTests || 0;
                const duration = ((results.testResults?.[0]?.duration || 0) / 1000).toFixed(2);
                
                testResults += `‚úÖ Passed: ${passed}/${total}\n`;
                if (failed > 0) {
                  testResults += `‚ùå Failed: ${failed}\n`;
                }
                testResults += `‚è±Ô∏è Duration: ${duration}s\n`;
                
                if (failed > 0 && results.testResults) {
                  testResults += '\n**Failed Tests:**\n';
                  results.testResults.forEach(suite => {
                    suite.assertionResults?.filter(test => test.status === 'failed').forEach(test => {
                      testResults += `- ${test.title}\n`;
                    });
                  });
                }
              } else {
                testResults += '‚ö†Ô∏è Test results not found. Check the workflow logs for details.\n';
              }
            } catch (error) {
              testResults += `‚ö†Ô∏è Could not parse test results: ${error.message}\n`;
            }
            
            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('E2E Test Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: testResults
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: testResults
              });
            }

  e2e-required:
    name: E2E Tests Required
    runs-on: ubuntu-latest
    needs: [e2e]
    if: always()
    steps:
      - name: Check E2E test results
        run: |
          if [ "${{ needs.e2e.result }}" != "success" ]; then
            echo "‚ùå E2E tests failed or were cancelled"
            exit 1
          fi
          echo "‚úÖ All E2E tests passed"